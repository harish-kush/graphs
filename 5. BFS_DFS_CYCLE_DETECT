#include<unordered_map>
#include<queue>
#include<list>
bool cycleBFS(int src, unordered_map<int,bool>& visited, unordered_map<int, list<int>>& adj){
    unordered_map<int,int>parent;

    parent[src] = -1;
    visited[src] = true;
    queue<int>q;
    q.push(src);
    
    while(!q.empty()){
        int front = q.front();
        q.pop();

        for(auto neighbour: adj[front]){
            if(visited[neighbour] && neighbour!=parent[front]) return true;
            else if(!visited[neighbour]){
                visited[neighbour] = true;
                q.push(neighbour);
                parent[neighbour] = front;
            }
        }
    }
    return false;
}

bool cycleDFS(int node, int parent, unordered_map<int,bool>& visited, unordered_map<int, list<int>>& adj){
    visited[node] = true;

    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            bool cycleDetected = cycleDFS(neighbour,node,visited,adj);
            if(cycleDetected) return true;
        }
        else if(parent!=neighbour) return true; // cycle detected
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // adjency list
    unordered_map<int, list<int>>adj;
    for(int i=0;i<m;i++){
        // make adj list with edges
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // visited map
    unordered_map<int,bool>visited;
    for(int i=0;i<n;i++){
        if(!visited[i]) {
            // bool ans = cycleBFS(i,visited,adj);
            bool ans = cycleDFS(i,-1,visited,adj);
            if(ans) return "Yes";
        }
    }
    return "No";
}
