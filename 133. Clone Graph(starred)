/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    vector<Node*>NodeRegister; // ye vector check krega ki iske pass address h ya nhi
    void dfs(Node* actual, Node* clone){
    for(auto neighbor: actual->neighbors){
        if(!NodeRegister[neighbor->val]){
            Node* newNode = new Node(neighbor->val);
            NodeRegister[neighbor->val] = newNode;
            clone->neighbors.push_back(newNode);
            dfs(neighbor,newNode);
        }else{
            clone->neighbors.push_back(NodeRegister[neighbor->val]);
        }
    }
}
    Node* cloneGraph(Node* node) {
        if(!node) return node;
        Node* clone = new Node(node->val);
        NodeRegister.resize(110,NULL);
        NodeRegister[clone->val] = clone; // node ki value = vector ka index aur ham uss idx pr add store kraa rhe
        dfs(node,clone); 
        return clone;
    }
};
